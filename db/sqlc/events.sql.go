// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: events.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
    name,
    description,
    capacity,
    latitude,
    longitude,
    address,
    date,
    owner_id,
    is_private,
    image_id
) VALUES (
             $1,
             $2,
             $3,
             $4,
             $5,
             $6,
             $7,
             $8,
             $9,
             $10
         )
    RETURNING id, name, description, capacity, latitude, longitude,
    address, date, owner_id, is_private, is_premium, created_at, image_id
`

type CreateEventParams struct {
	Name        string         `json:"name"`
	Description string         `json:"description"`
	Capacity    int32          `json:"capacity"`
	Latitude    pgtype.Numeric `json:"latitude"`
	Longitude   pgtype.Numeric `json:"longitude"`
	Address     string         `json:"address"`
	Date        time.Time      `json:"date"`
	OwnerID     int32          `json:"owner_id"`
	IsPrivate   bool           `json:"is_private"`
	ImageID     pgtype.UUID    `json:"image_id"`
}

type CreateEventRow struct {
	ID          int32          `json:"id"`
	Name        string         `json:"name"`
	Description string         `json:"description"`
	Capacity    int32          `json:"capacity"`
	Latitude    pgtype.Numeric `json:"latitude"`
	Longitude   pgtype.Numeric `json:"longitude"`
	Address     string         `json:"address"`
	Date        time.Time      `json:"date"`
	OwnerID     int32          `json:"owner_id"`
	IsPrivate   bool           `json:"is_private"`
	IsPremium   bool           `json:"is_premium"`
	CreatedAt   time.Time      `json:"created_at"`
	ImageID     pgtype.UUID    `json:"image_id"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (CreateEventRow, error) {
	row := q.db.QueryRow(ctx, createEvent,
		arg.Name,
		arg.Description,
		arg.Capacity,
		arg.Latitude,
		arg.Longitude,
		arg.Address,
		arg.Date,
		arg.OwnerID,
		arg.IsPrivate,
		arg.ImageID,
	)
	var i CreateEventRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Capacity,
		&i.Latitude,
		&i.Longitude,
		&i.Address,
		&i.Date,
		&i.OwnerID,
		&i.IsPrivate,
		&i.IsPremium,
		&i.CreatedAt,
		&i.ImageID,
	)
	return i, err
}

const createPremiumOrder = `-- name: CreatePremiumOrder :one
INSERT INTO premium_orders (
    user_id,
    event_id,
    shop,
    price
) VALUES (
    $1, $2, $3, $4
         ) RETURNING id, user_id, event_id, shop, price, status, created_at
`

type CreatePremiumOrderParams struct {
	UserID  int32          `json:"user_id"`
	EventID int32          `json:"event_id"`
	Shop    string         `json:"shop"`
	Price   pgtype.Numeric `json:"price"`
}

func (q *Queries) CreatePremiumOrder(ctx context.Context, arg CreatePremiumOrderParams) (PremiumOrder, error) {
	row := q.db.QueryRow(ctx, createPremiumOrder,
		arg.UserID,
		arg.EventID,
		arg.Shop,
		arg.Price,
	)
	var i PremiumOrder
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EventID,
		&i.Shop,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const createPrivateEventToken = `-- name: CreatePrivateEventToken :exec
INSERT INTO event_tokens (
    event_id,
    token,
    expires_at
) VALUES ($1, $2, $3)
`

type CreatePrivateEventTokenParams struct {
	EventID   int32     `json:"event_id"`
	Token     string    `json:"token"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreatePrivateEventToken(ctx context.Context, arg CreatePrivateEventTokenParams) error {
	_, err := q.db.Exec(ctx, createPrivateEventToken, arg.EventID, arg.Token, arg.ExpiresAt)
	return err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events
WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteEvent, id)
	return err
}

const getEvent = `-- name: GetEvent :one
SELECT
    e.id,
    e.name,
    e.description,
    e.capacity,
    e.latitude,
    e.longitude,
    e.address,
    e.date,
    e.owner_id,
    e.owner_username,
    e.is_private,
    e.is_premium,
    e.created_at,
    e.tags,
    e.image_id,
    e.participants_count,
    e.event_image_path,
    e.user_image_path,
    CASE
        WHEN $2 = e.owner_id THEN true
        WHEN (SELECT is_admin FROM users WHERE id = $2) THEN true
        WHEN NOT e.is_private THEN true
        WHEN EXISTS (
            SELECT 1 FROM event_user eu
            WHERE eu.event_id = e.id
              AND eu.user_id = $2
        ) THEN true
        WHEN et.token IS NOT NULL THEN
            et.expires_at > NOW()
        ELSE false
        END AS allowed
FROM event_with_tags_view e
         LEFT JOIN event_tokens et
                   ON e.id = et.event_id
                       AND et.token = $3
WHERE e.id = $1
  AND (
    NOT e.is_private
        OR
    (e.is_private AND (
        EXISTS (SELECT 1 FROM event_user WHERE event_id = e.id AND user_id = $2)
            OR et.token IS NOT NULL
            OR $2 = e.owner_id
            OR (SELECT is_admin FROM users WHERE id = $2)
        ))
    )
`

type GetEventParams struct {
	ID      int32  `json:"id"`
	OwnerID int32  `json:"owner_id"`
	Token   string `json:"token"`
}

type GetEventRow struct {
	ID                int32          `json:"id"`
	Name              string         `json:"name"`
	Description       string         `json:"description"`
	Capacity          int32          `json:"capacity"`
	Latitude          pgtype.Numeric `json:"latitude"`
	Longitude         pgtype.Numeric `json:"longitude"`
	Address           string         `json:"address"`
	Date              time.Time      `json:"date"`
	OwnerID           int32          `json:"owner_id"`
	OwnerUsername     pgtype.Text    `json:"owner_username"`
	IsPrivate         bool           `json:"is_private"`
	IsPremium         bool           `json:"is_premium"`
	CreatedAt         time.Time      `json:"created_at"`
	Tags              []Tag          `json:"tags"`
	ImageID           pgtype.UUID    `json:"image_id"`
	ParticipantsCount int64          `json:"participants_count"`
	EventImagePath    pgtype.Text    `json:"event_image_path"`
	UserImagePath     pgtype.Text    `json:"user_image_path"`
	Allowed           bool           `json:"allowed"`
}

func (q *Queries) GetEvent(ctx context.Context, arg GetEventParams) (GetEventRow, error) {
	row := q.db.QueryRow(ctx, getEvent, arg.ID, arg.OwnerID, arg.Token)
	var i GetEventRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Capacity,
		&i.Latitude,
		&i.Longitude,
		&i.Address,
		&i.Date,
		&i.OwnerID,
		&i.OwnerUsername,
		&i.IsPrivate,
		&i.IsPremium,
		&i.CreatedAt,
		&i.Tags,
		&i.ImageID,
		&i.ParticipantsCount,
		&i.EventImagePath,
		&i.UserImagePath,
		&i.Allowed,
	)
	return i, err
}

const getGuestRecommendedEvents = `-- name: GetGuestRecommendedEvents :many
SELECT
    id,
    name,
    description,
    capacity,
    latitude,
    longitude,
    address,
    date,
    owner_id,
    owner_username,
    is_private,
    is_premium,
    created_at,
    tags,
    participants_count,
    event_image_path,
    user_image_path
FROM event_with_tags_view
WHERE
    date > NOW()
  AND ST_DWithin(
    geom,
    ST_MakePoint($1::numeric, $2::numeric)::GEOGRAPHY,
    100000
    )
  AND is_private = false
ORDER BY
    ST_Distance(geom, ST_MakePoint($1::numeric, $2::numeric)::GEOGRAPHY) ASC,
    created_at DESC
    LIMIT 6
`

type GetGuestRecommendedEventsParams struct {
	UserLon pgtype.Numeric `json:"user_lon"`
	UserLat pgtype.Numeric `json:"user_lat"`
}

type GetGuestRecommendedEventsRow struct {
	ID                int32          `json:"id"`
	Name              string         `json:"name"`
	Description       string         `json:"description"`
	Capacity          int32          `json:"capacity"`
	Latitude          pgtype.Numeric `json:"latitude"`
	Longitude         pgtype.Numeric `json:"longitude"`
	Address           string         `json:"address"`
	Date              time.Time      `json:"date"`
	OwnerID           int32          `json:"owner_id"`
	OwnerUsername     pgtype.Text    `json:"owner_username"`
	IsPrivate         bool           `json:"is_private"`
	IsPremium         bool           `json:"is_premium"`
	CreatedAt         time.Time      `json:"created_at"`
	Tags              []Tag          `json:"tags"`
	ParticipantsCount int64          `json:"participants_count"`
	EventImagePath    pgtype.Text    `json:"event_image_path"`
	UserImagePath     pgtype.Text    `json:"user_image_path"`
}

func (q *Queries) GetGuestRecommendedEvents(ctx context.Context, arg GetGuestRecommendedEventsParams) ([]GetGuestRecommendedEventsRow, error) {
	rows, err := q.db.Query(ctx, getGuestRecommendedEvents, arg.UserLon, arg.UserLat)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetGuestRecommendedEventsRow{}
	for rows.Next() {
		var i GetGuestRecommendedEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Capacity,
			&i.Latitude,
			&i.Longitude,
			&i.Address,
			&i.Date,
			&i.OwnerID,
			&i.OwnerUsername,
			&i.IsPrivate,
			&i.IsPremium,
			&i.CreatedAt,
			&i.Tags,
			&i.ParticipantsCount,
			&i.EventImagePath,
			&i.UserImagePath,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestEvents = `-- name: GetLatestEvents :many
SELECT
    id,
    name,
    description,
    capacity,
    latitude,
    longitude,
    address,
    date,
    owner_id,
    owner_username,
    is_private,
    is_premium,
    created_at,
    tags,
    participants_count,
    event_image_path,
    user_image_path
FROM event_with_tags_view
WHERE date > NOW() AND is_private = false
ORDER BY created_at DESC
    LIMIT 6
`

type GetLatestEventsRow struct {
	ID                int32          `json:"id"`
	Name              string         `json:"name"`
	Description       string         `json:"description"`
	Capacity          int32          `json:"capacity"`
	Latitude          pgtype.Numeric `json:"latitude"`
	Longitude         pgtype.Numeric `json:"longitude"`
	Address           string         `json:"address"`
	Date              time.Time      `json:"date"`
	OwnerID           int32          `json:"owner_id"`
	OwnerUsername     pgtype.Text    `json:"owner_username"`
	IsPrivate         bool           `json:"is_private"`
	IsPremium         bool           `json:"is_premium"`
	CreatedAt         time.Time      `json:"created_at"`
	Tags              []Tag          `json:"tags"`
	ParticipantsCount int64          `json:"participants_count"`
	EventImagePath    pgtype.Text    `json:"event_image_path"`
	UserImagePath     pgtype.Text    `json:"user_image_path"`
}

func (q *Queries) GetLatestEvents(ctx context.Context) ([]GetLatestEventsRow, error) {
	rows, err := q.db.Query(ctx, getLatestEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetLatestEventsRow{}
	for rows.Next() {
		var i GetLatestEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Capacity,
			&i.Latitude,
			&i.Longitude,
			&i.Address,
			&i.Date,
			&i.OwnerID,
			&i.OwnerUsername,
			&i.IsPrivate,
			&i.IsPremium,
			&i.CreatedAt,
			&i.Tags,
			&i.ParticipantsCount,
			&i.EventImagePath,
			&i.UserImagePath,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOwnedUserEvents = `-- name: GetOwnedUserEvents :many
SELECT
    e.id,
    e.name,
    e.description,
    e.capacity,
    e.latitude,
    e.longitude,
    e.address,
    e.date,
    e.owner_id,
    e.owner_username,
    e.is_private,
    e.is_premium,
    e.created_at,
    e.tags,
    e.participants_count,
    e.event_image_path,
    e.user_image_path
FROM event_with_tags_view e
WHERE
    e.owner_id = $1
ORDER BY
    e.date DESC
`

type GetOwnedUserEventsRow struct {
	ID                int32          `json:"id"`
	Name              string         `json:"name"`
	Description       string         `json:"description"`
	Capacity          int32          `json:"capacity"`
	Latitude          pgtype.Numeric `json:"latitude"`
	Longitude         pgtype.Numeric `json:"longitude"`
	Address           string         `json:"address"`
	Date              time.Time      `json:"date"`
	OwnerID           int32          `json:"owner_id"`
	OwnerUsername     pgtype.Text    `json:"owner_username"`
	IsPrivate         bool           `json:"is_private"`
	IsPremium         bool           `json:"is_premium"`
	CreatedAt         time.Time      `json:"created_at"`
	Tags              []Tag          `json:"tags"`
	ParticipantsCount int64          `json:"participants_count"`
	EventImagePath    pgtype.Text    `json:"event_image_path"`
	UserImagePath     pgtype.Text    `json:"user_image_path"`
}

func (q *Queries) GetOwnedUserEvents(ctx context.Context, userID int32) ([]GetOwnedUserEventsRow, error) {
	rows, err := q.db.Query(ctx, getOwnedUserEvents, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetOwnedUserEventsRow{}
	for rows.Next() {
		var i GetOwnedUserEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Capacity,
			&i.Latitude,
			&i.Longitude,
			&i.Address,
			&i.Date,
			&i.OwnerID,
			&i.OwnerUsername,
			&i.IsPrivate,
			&i.IsPremium,
			&i.CreatedAt,
			&i.Tags,
			&i.ParticipantsCount,
			&i.EventImagePath,
			&i.UserImagePath,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPastUserEvents = `-- name: GetPastUserEvents :many
SELECT
    e.id,
    e.name,
    e.description,
    e.capacity,
    e.latitude,
    e.longitude,
    e.address,
    e.date,
    e.owner_id,
    e.owner_username,
    e.is_private,
    e.is_premium,
    e.created_at,
    e.tags,
    e.participants_count,
    e.event_image_path,
    e.user_image_path
FROM event_with_tags_view e
         JOIN event_user eu ON e.id = eu.event_id
WHERE
    eu.user_id = $1
  AND e.date < NOW()
ORDER BY
    e.date DESC
`

type GetPastUserEventsRow struct {
	ID                int32          `json:"id"`
	Name              string         `json:"name"`
	Description       string         `json:"description"`
	Capacity          int32          `json:"capacity"`
	Latitude          pgtype.Numeric `json:"latitude"`
	Longitude         pgtype.Numeric `json:"longitude"`
	Address           string         `json:"address"`
	Date              time.Time      `json:"date"`
	OwnerID           int32          `json:"owner_id"`
	OwnerUsername     pgtype.Text    `json:"owner_username"`
	IsPrivate         bool           `json:"is_private"`
	IsPremium         bool           `json:"is_premium"`
	CreatedAt         time.Time      `json:"created_at"`
	Tags              []Tag          `json:"tags"`
	ParticipantsCount int64          `json:"participants_count"`
	EventImagePath    pgtype.Text    `json:"event_image_path"`
	UserImagePath     pgtype.Text    `json:"user_image_path"`
}

func (q *Queries) GetPastUserEvents(ctx context.Context, userID int32) ([]GetPastUserEventsRow, error) {
	rows, err := q.db.Query(ctx, getPastUserEvents, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPastUserEventsRow{}
	for rows.Next() {
		var i GetPastUserEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Capacity,
			&i.Latitude,
			&i.Longitude,
			&i.Address,
			&i.Date,
			&i.OwnerID,
			&i.OwnerUsername,
			&i.IsPrivate,
			&i.IsPremium,
			&i.CreatedAt,
			&i.Tags,
			&i.ParticipantsCount,
			&i.EventImagePath,
			&i.UserImagePath,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPopularEvents = `-- name: GetPopularEvents :many
SELECT
    id,
    name,
    description,
    capacity,
    latitude,
    longitude,
    address,
    date,
    owner_id,
    owner_username,
    is_private,
    is_premium,
    created_at,
    tags,
    participants_count,
    event_image_path,
    user_image_path
FROM event_with_tags_view
WHERE date > NOW() AND is_private = false
ORDER BY participants_count DESC, created_at DESC
    LIMIT 6
`

type GetPopularEventsRow struct {
	ID                int32          `json:"id"`
	Name              string         `json:"name"`
	Description       string         `json:"description"`
	Capacity          int32          `json:"capacity"`
	Latitude          pgtype.Numeric `json:"latitude"`
	Longitude         pgtype.Numeric `json:"longitude"`
	Address           string         `json:"address"`
	Date              time.Time      `json:"date"`
	OwnerID           int32          `json:"owner_id"`
	OwnerUsername     pgtype.Text    `json:"owner_username"`
	IsPrivate         bool           `json:"is_private"`
	IsPremium         bool           `json:"is_premium"`
	CreatedAt         time.Time      `json:"created_at"`
	Tags              []Tag          `json:"tags"`
	ParticipantsCount int64          `json:"participants_count"`
	EventImagePath    pgtype.Text    `json:"event_image_path"`
	UserImagePath     pgtype.Text    `json:"user_image_path"`
}

func (q *Queries) GetPopularEvents(ctx context.Context) ([]GetPopularEventsRow, error) {
	rows, err := q.db.Query(ctx, getPopularEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPopularEventsRow{}
	for rows.Next() {
		var i GetPopularEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Capacity,
			&i.Latitude,
			&i.Longitude,
			&i.Address,
			&i.Date,
			&i.OwnerID,
			&i.OwnerUsername,
			&i.IsPrivate,
			&i.IsPremium,
			&i.CreatedAt,
			&i.Tags,
			&i.ParticipantsCount,
			&i.EventImagePath,
			&i.UserImagePath,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPremiumEvents = `-- name: GetPremiumEvents :many
SELECT
    id,
    name,
    description,
    capacity,
    latitude,
    longitude,
    address,
    date,
    owner_id,
    owner_username,
    is_private,
    is_premium,
    created_at,
    tags,
    participants_count,
    event_image_path,
    user_image_path
FROM event_with_tags_view
WHERE is_premium = TRUE
  AND date > NOW() AND is_private = false
ORDER BY created_at DESC
    LIMIT 6
`

type GetPremiumEventsRow struct {
	ID                int32          `json:"id"`
	Name              string         `json:"name"`
	Description       string         `json:"description"`
	Capacity          int32          `json:"capacity"`
	Latitude          pgtype.Numeric `json:"latitude"`
	Longitude         pgtype.Numeric `json:"longitude"`
	Address           string         `json:"address"`
	Date              time.Time      `json:"date"`
	OwnerID           int32          `json:"owner_id"`
	OwnerUsername     pgtype.Text    `json:"owner_username"`
	IsPrivate         bool           `json:"is_private"`
	IsPremium         bool           `json:"is_premium"`
	CreatedAt         time.Time      `json:"created_at"`
	Tags              []Tag          `json:"tags"`
	ParticipantsCount int64          `json:"participants_count"`
	EventImagePath    pgtype.Text    `json:"event_image_path"`
	UserImagePath     pgtype.Text    `json:"user_image_path"`
}

func (q *Queries) GetPremiumEvents(ctx context.Context) ([]GetPremiumEventsRow, error) {
	rows, err := q.db.Query(ctx, getPremiumEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPremiumEventsRow{}
	for rows.Next() {
		var i GetPremiumEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Capacity,
			&i.Latitude,
			&i.Longitude,
			&i.Address,
			&i.Date,
			&i.OwnerID,
			&i.OwnerUsername,
			&i.IsPrivate,
			&i.IsPremium,
			&i.CreatedAt,
			&i.Tags,
			&i.ParticipantsCount,
			&i.EventImagePath,
			&i.UserImagePath,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPremiumOrder = `-- name: GetPremiumOrder :one
SELECT id, user_id, event_id, shop, price, status, created_at FROM premium_orders
WHERE id = $1
`

func (q *Queries) GetPremiumOrder(ctx context.Context, id int32) (PremiumOrder, error) {
	row := q.db.QueryRow(ctx, getPremiumOrder, id)
	var i PremiumOrder
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EventID,
		&i.Shop,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getUpcomingUserEvents = `-- name: GetUpcomingUserEvents :many
SELECT
    e.id,
    e.name,
    e.description,
    e.capacity,
    e.latitude,
    e.longitude,
    e.address,
    e.date,
    e.owner_id,
    e.owner_username,
    e.is_private,
    e.is_premium,
    e.created_at,
    e.tags,
    e.participants_count,
    e.event_image_path,
    e.user_image_path
FROM event_with_tags_view e
         JOIN event_user eu ON e.id = eu.event_id
WHERE
    eu.user_id = $1
  AND e.date > NOW()
ORDER BY
    e.date ASC
`

type GetUpcomingUserEventsRow struct {
	ID                int32          `json:"id"`
	Name              string         `json:"name"`
	Description       string         `json:"description"`
	Capacity          int32          `json:"capacity"`
	Latitude          pgtype.Numeric `json:"latitude"`
	Longitude         pgtype.Numeric `json:"longitude"`
	Address           string         `json:"address"`
	Date              time.Time      `json:"date"`
	OwnerID           int32          `json:"owner_id"`
	OwnerUsername     pgtype.Text    `json:"owner_username"`
	IsPrivate         bool           `json:"is_private"`
	IsPremium         bool           `json:"is_premium"`
	CreatedAt         time.Time      `json:"created_at"`
	Tags              []Tag          `json:"tags"`
	ParticipantsCount int64          `json:"participants_count"`
	EventImagePath    pgtype.Text    `json:"event_image_path"`
	UserImagePath     pgtype.Text    `json:"user_image_path"`
}

func (q *Queries) GetUpcomingUserEvents(ctx context.Context, userID int32) ([]GetUpcomingUserEventsRow, error) {
	rows, err := q.db.Query(ctx, getUpcomingUserEvents, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUpcomingUserEventsRow{}
	for rows.Next() {
		var i GetUpcomingUserEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Capacity,
			&i.Latitude,
			&i.Longitude,
			&i.Address,
			&i.Date,
			&i.OwnerID,
			&i.OwnerUsername,
			&i.IsPrivate,
			&i.IsPremium,
			&i.CreatedAt,
			&i.Tags,
			&i.ParticipantsCount,
			&i.EventImagePath,
			&i.UserImagePath,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserRecommendedEvents = `-- name: GetUserRecommendedEvents :many
WITH user_tags AS (
    SELECT (tag->>'id')::INT AS tag_id
    FROM user_with_tags_view,
         json_array_elements(tags) AS tag
    WHERE user_with_tags_view.id = $3
)
SELECT
    evt.id,
    evt.name,
    evt.description,
    evt.capacity,
    evt.latitude,
    evt.longitude,
    evt.address,
    evt.date,
    evt.owner_id,
    evt.owner_username,
    evt.is_private,
    evt.is_premium,
    evt.created_at,
    evt.tags,
    evt.participants_count,
    evt.event_image_path,
    evt.user_image_path,
    (
        SELECT COUNT(*)
        FROM event_tags et
        WHERE
            et.event_id = evt.id
          AND et.tag_id IN (SELECT tag_id FROM user_tags)
    ) AS matched_tags,
    ST_Distance(
            evt.geom,
            ST_MakePoint($1::numeric, $2::numeric)::GEOGRAPHY
    ) AS distance
FROM event_with_tags_view evt
WHERE
    evt.date > NOW()
  AND ST_DWithin(
        evt.geom,
        ST_MakePoint($1::numeric, $2::numeric)::GEOGRAPHY,
        100000
      )
  AND evt.is_private = false
ORDER BY
    matched_tags DESC,
    created_at DESC,
    distance ASC
    LIMIT 6
`

type GetUserRecommendedEventsParams struct {
	UserLon pgtype.Numeric `json:"user_lon"`
	UserLat pgtype.Numeric `json:"user_lat"`
	UserID  int32          `json:"user_id"`
}

type GetUserRecommendedEventsRow struct {
	ID                int32          `json:"id"`
	Name              string         `json:"name"`
	Description       string         `json:"description"`
	Capacity          int32          `json:"capacity"`
	Latitude          pgtype.Numeric `json:"latitude"`
	Longitude         pgtype.Numeric `json:"longitude"`
	Address           string         `json:"address"`
	Date              time.Time      `json:"date"`
	OwnerID           int32          `json:"owner_id"`
	OwnerUsername     pgtype.Text    `json:"owner_username"`
	IsPrivate         bool           `json:"is_private"`
	IsPremium         bool           `json:"is_premium"`
	CreatedAt         time.Time      `json:"created_at"`
	Tags              []Tag          `json:"tags"`
	ParticipantsCount int64          `json:"participants_count"`
	EventImagePath    pgtype.Text    `json:"event_image_path"`
	UserImagePath     pgtype.Text    `json:"user_image_path"`
	MatchedTags       int64          `json:"matched_tags"`
	Distance          interface{}    `json:"distance"`
}

func (q *Queries) GetUserRecommendedEvents(ctx context.Context, arg GetUserRecommendedEventsParams) ([]GetUserRecommendedEventsRow, error) {
	rows, err := q.db.Query(ctx, getUserRecommendedEvents, arg.UserLon, arg.UserLat, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserRecommendedEventsRow{}
	for rows.Next() {
		var i GetUserRecommendedEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Capacity,
			&i.Latitude,
			&i.Longitude,
			&i.Address,
			&i.Date,
			&i.OwnerID,
			&i.OwnerUsername,
			&i.IsPrivate,
			&i.IsPremium,
			&i.CreatedAt,
			&i.Tags,
			&i.ParticipantsCount,
			&i.EventImagePath,
			&i.UserImagePath,
			&i.MatchedTags,
			&i.Distance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllEvents = `-- name: ListAllEvents :many
SELECT
    evt.id,
    evt.name,
    evt.description,
    evt.capacity,
    evt.latitude,
    evt.longitude,
    evt.address,
    evt.date,
    evt.owner_id,
    evt.owner_username,
    evt.is_private,
    evt.is_premium,
    evt.created_at,
    evt.tags,
    evt.participants_count,
    evt.event_image_path,
    evt.user_image_path,
    (
        SELECT COUNT(*)
        FROM event_tags et
        WHERE et.event_id = evt.id
          AND et.tag_id = ANY($1::int[])
    ) AS matched_tags,
    NULL::float AS distance
FROM event_with_tags_view evt
WHERE
    evt.date > NOW()
  AND (
    $2::text = ''
        OR (
            evt.name ILIKE '%' || $2 || '%'
            OR evt.description ILIKE '%' || $2 || '%'
        )
    )
  AND (
    cardinality($1::int[]) = 0
        OR EXISTS (
        SELECT 1
        FROM event_tags et
        WHERE et.event_id = evt.id
          AND et.tag_id = ANY($1::int[])
    )
    )
  AND (
    $3::text IS NULL
        OR $3::text = ''
        OR CASE
            WHEN $3 = 'day' THEN evt.date BETWEEN NOW() AND NOW() + INTERVAL '1 day'
            WHEN $3 = 'week' THEN evt.date BETWEEN NOW() AND NOW() + INTERVAL '7 days'
            WHEN $3 = 'month' THEN evt.date BETWEEN NOW() AND NOW() + INTERVAL '1 month'
            ELSE TRUE
        END
    )
ORDER BY
    CASE WHEN $2::text <> '' THEN
             SIMILARITY(evt.name, $2) +
             SIMILARITY(evt.description, $2)
         ELSE 0 END DESC,
    matched_tags DESC,
    evt.created_at DESC
`

type ListAllEventsParams struct {
	TagIds     []int32 `json:"tag_ids"`
	SearchTerm string  `json:"search_term"`
	DateRange  string  `json:"date_range"`
}

type ListAllEventsRow struct {
	ID                int32          `json:"id"`
	Name              string         `json:"name"`
	Description       string         `json:"description"`
	Capacity          int32          `json:"capacity"`
	Latitude          pgtype.Numeric `json:"latitude"`
	Longitude         pgtype.Numeric `json:"longitude"`
	Address           string         `json:"address"`
	Date              time.Time      `json:"date"`
	OwnerID           int32          `json:"owner_id"`
	OwnerUsername     pgtype.Text    `json:"owner_username"`
	IsPrivate         bool           `json:"is_private"`
	IsPremium         bool           `json:"is_premium"`
	CreatedAt         time.Time      `json:"created_at"`
	Tags              []Tag          `json:"tags"`
	ParticipantsCount int64          `json:"participants_count"`
	EventImagePath    pgtype.Text    `json:"event_image_path"`
	UserImagePath     pgtype.Text    `json:"user_image_path"`
	MatchedTags       int64          `json:"matched_tags"`
	Distance          pgtype.Float8  `json:"distance"`
}

func (q *Queries) ListAllEvents(ctx context.Context, arg ListAllEventsParams) ([]ListAllEventsRow, error) {
	rows, err := q.db.Query(ctx, listAllEvents, arg.TagIds, arg.SearchTerm, arg.DateRange)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAllEventsRow{}
	for rows.Next() {
		var i ListAllEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Capacity,
			&i.Latitude,
			&i.Longitude,
			&i.Address,
			&i.Date,
			&i.OwnerID,
			&i.OwnerUsername,
			&i.IsPrivate,
			&i.IsPremium,
			&i.CreatedAt,
			&i.Tags,
			&i.ParticipantsCount,
			&i.EventImagePath,
			&i.UserImagePath,
			&i.MatchedTags,
			&i.Distance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEvents = `-- name: ListEvents :many
SELECT
    evt.id,
    evt.name,
    evt.description,
    evt.capacity,
    evt.latitude,
    evt.longitude,
    evt.address,
    evt.date,
    evt.owner_id,
    evt.owner_username,
    evt.is_private,
    evt.is_premium,
    evt.created_at,
    evt.tags,
    evt.participants_count,
    evt.event_image_path,
    evt.user_image_path,
    (
        SELECT COUNT(*)
        FROM event_tags et
        WHERE et.event_id = evt.id
          AND et.tag_id = ANY($1::int[])
    ) AS matched_tags,
    ST_Distance(
            evt.geom,
            ST_MakePoint($2::numeric, $3::numeric)::GEOGRAPHY
    ) AS distance
FROM event_with_tags_view evt
WHERE
    ST_DWithin(
            evt.geom,
            ST_MakePoint($2::numeric, $3::numeric)::GEOGRAPHY,
            100000
    )
  AND evt.is_private = false
  AND evt.date > NOW()
  AND (
    $4::text = ''
        OR (
            evt.name ILIKE '%' || $4 || '%'
            OR evt.description ILIKE '%' || $4 || '%'
        )
    )
  AND (
    cardinality($1::int[]) = 0
        OR EXISTS (
        SELECT 1
        FROM event_tags et
        WHERE et.event_id = evt.id
          AND et.tag_id = ANY($1::int[])
    )
    )
  AND (
    $5::text IS NULL
        OR $5::text = ''
        OR CASE
            WHEN $5 = 'day' THEN evt.date BETWEEN NOW() AND NOW() + INTERVAL '1 day'
            WHEN $5 = 'week' THEN evt.date BETWEEN NOW() AND NOW() + INTERVAL '7 days'
            WHEN $5 = 'month' THEN evt.date BETWEEN NOW() AND NOW() + INTERVAL '1 month'
            ELSE TRUE
        END
    )
ORDER BY
    CASE WHEN $4::text <> '' THEN
             SIMILARITY(evt.name, $4) +
             SIMILARITY(evt.description, $4)
         ELSE 0 END DESC,
    matched_tags DESC,
    evt.created_at DESC,
    distance ASC
`

type ListEventsParams struct {
	TagIds     []int32        `json:"tag_ids"`
	UserLon    pgtype.Numeric `json:"user_lon"`
	UserLat    pgtype.Numeric `json:"user_lat"`
	SearchTerm string         `json:"search_term"`
	DateRange  string         `json:"date_range"`
}

type ListEventsRow struct {
	ID                int32          `json:"id"`
	Name              string         `json:"name"`
	Description       string         `json:"description"`
	Capacity          int32          `json:"capacity"`
	Latitude          pgtype.Numeric `json:"latitude"`
	Longitude         pgtype.Numeric `json:"longitude"`
	Address           string         `json:"address"`
	Date              time.Time      `json:"date"`
	OwnerID           int32          `json:"owner_id"`
	OwnerUsername     pgtype.Text    `json:"owner_username"`
	IsPrivate         bool           `json:"is_private"`
	IsPremium         bool           `json:"is_premium"`
	CreatedAt         time.Time      `json:"created_at"`
	Tags              []Tag          `json:"tags"`
	ParticipantsCount int64          `json:"participants_count"`
	EventImagePath    pgtype.Text    `json:"event_image_path"`
	UserImagePath     pgtype.Text    `json:"user_image_path"`
	MatchedTags       int64          `json:"matched_tags"`
	Distance          interface{}    `json:"distance"`
}

func (q *Queries) ListEvents(ctx context.Context, arg ListEventsParams) ([]ListEventsRow, error) {
	rows, err := q.db.Query(ctx, listEvents,
		arg.TagIds,
		arg.UserLon,
		arg.UserLat,
		arg.SearchTerm,
		arg.DateRange,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListEventsRow{}
	for rows.Next() {
		var i ListEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Capacity,
			&i.Latitude,
			&i.Longitude,
			&i.Address,
			&i.Date,
			&i.OwnerID,
			&i.OwnerUsername,
			&i.IsPrivate,
			&i.IsPremium,
			&i.CreatedAt,
			&i.Tags,
			&i.ParticipantsCount,
			&i.EventImagePath,
			&i.UserImagePath,
			&i.MatchedTags,
			&i.Distance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setEventPremium = `-- name: SetEventPremium :exec
WITH
    get_event AS (
        SELECT event_id
        FROM premium_orders
        WHERE premium_orders.id = $1
    ),
    update_event AS (
UPDATE events
SET is_premium = true
WHERE id = (SELECT event_id FROM get_event)
    ),
update_order AS (
    UPDATE premium_orders
    SET status = 'complete'
    WHERE id = $1
)
SELECT 1
`

func (q *Queries) SetEventPremium(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, setEventPremium, id)
	return err
}

const updateEvent = `-- name: UpdateEvent :exec
UPDATE events
SET
    name = $1,
    description = $2,
    capacity = $3,
    latitude = $4,
    longitude = $5,
    address = $6,
    date = $7,
    is_private = $8,
    image_id = $9
WHERE id = $10
`

type UpdateEventParams struct {
	Name        string         `json:"name"`
	Description string         `json:"description"`
	Capacity    int32          `json:"capacity"`
	Latitude    pgtype.Numeric `json:"latitude"`
	Longitude   pgtype.Numeric `json:"longitude"`
	Address     string         `json:"address"`
	Date        time.Time      `json:"date"`
	IsPrivate   bool           `json:"is_private"`
	ImageID     pgtype.UUID    `json:"image_id"`
	ID          int32          `json:"id"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) error {
	_, err := q.db.Exec(ctx, updateEvent,
		arg.Name,
		arg.Description,
		arg.Capacity,
		arg.Latitude,
		arg.Longitude,
		arg.Address,
		arg.Date,
		arg.IsPrivate,
		arg.ImageID,
		arg.ID,
	)
	return err
}
