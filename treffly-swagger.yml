openapi: 3.0.0
info:
  title: Treffly API
  version: 0.1.0

servers:
  - url: https://trefflyqa.ru/api
    description: Production server


paths:
  /login:
    post:
      summary: Аутентифицировать пользователя
      description: Проверяет учетные данные и возвращает токены доступа
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUserRequest"

      responses:
        200:
          description: Успешная аутентификация
          headers:
            Set-Cookie:
              schema:
                type: object
                properties:
                  cookies:
                    type: array
                    items:
                      type: string
                    example:
                      - $ref: "#/components/examples/RefreshTokenCookie"
                      - $ref: "#/components/examples/AccessTokenCookie"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/InvalidCredentials"
        500:
          $ref: "#/components/responses/InternalServerError"


  /auth:
    get:
      summary: Проверить аутентифицированность пользователя
      description: Проверяет наличие валидной сессии пользователя
      tags:
        - Authentication
      security:
        - CookieAuth: [ ]
      responses:
        200:
          description: Пользователь аутентифицирован
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_admin:
                    type: boolean
                    example: false
        401:
          description: Пользователь неаутентифицирован
        500:
          $ref: "#/components/responses/InternalServerError"

  /auth/refresh:
    post:
      summary: Обновить токены
      description: Генерирует новые access и refresh токены
      tags:
        - Authentication
      security:
        - CookieAuth: [ ]
      responses:
        200:
          description: Токены успешно обновлены
          headers:
            Set-Cookie:
              schema:
                type: array
                items:
                  type: string
                example:
                  - $ref: "#/components/examples/RefreshTokenCookie"
                  - $ref: "#/components/examples/AccessTokenCookie"
        401:
          $ref: "#/components/responses/TokenExpired"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /logout:
    post:
      summary: Выйти из текущей сессии
      description: Инвалидирует текущую сессию пользователя
      tags:
        - Authentication
      security:
        - CookieAuth: [ ]
      responses:
        204:
          description: Сессия успешно завершена
          headers:
            Set-Cookie:
              schema:
                type: array
                items:
                  type: string
                example:
                  - "refresh_token=; Path=/api/auth; HttpOnly; Secure; SameSite=Lax; Max-Age=0"
                  - "access_token=; Path=/api/; HttpOnly; Secure; SameSite=Lax; Max-Age=0"
        401:
          $ref: "#/components/responses/TokenExpired"

  /admin/users:
    get:
      summary: Получить список всех пользователей (только для администраторов)
      description: |
        Возвращает полные данные всех пользователей.
        Требуются права администратора.
      tags:
        - Users
      security:
        - CookieAuth: [ admin ]
      parameters:
        - in: query
          name: username
          schema:
            type: string
          description: Юзернейм пользователя
      responses:
        200:
          description: Успешный ответ
          content:
            application/json:
             schema:
                $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/TokenExpired"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"
  /users:
    post:
      summary: Создать пользователя
      description: Создаёт пользователя без тегов.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        200:
          description: Успешное создание пользователя.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"

  /admin/users/{id}:
    delete:
      summary: Удалить пользователя
      description: Удаляет пользователя по ID (требуются права администратора).
      tags:
        - Users
      security:
        - CookieAuth: [ admin ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
      responses:
        204:
          description: Пользователь успешно удалён
        401:
          $ref: "#/components/responses/TokenExpired"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  /users/me:
    get:
      summary: Получить данные текущего пользователя
      description: Возвращает информацию о текущем аутентифицированном пользователе, используя access токен.
      tags:
        - Users
      security:
        - CookieAuth: [ ]
      responses:
        200:
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithTags"
        401:
          $ref: "#/components/responses/TokenExpired"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    put:
      summary: Изменить данные текущего пользователя.
      description: Изменяет данные текущего пользователя, используя access токен.
      tags:
        - Users
      security:
        - CookieAuth: [ ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        200:
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateUserResponse"
        401:
          $ref: "#/components/responses/TokenExpired"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Удалить текущего пользователя
      description: Удаляет текущего пользователя, используя access токен.
      tags:
        - Users
      security:
        - CookieAuth: [ ]
      responses:
        204:
          description: Пользователь успешно удалён
        401:
          $ref: "#/components/responses/TokenExpired"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /tags:
    get:
      summary: Получить доступные теги
      description: Получает доступные теги
      tags:
        - Tags
      responses:
        200:
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
        500:
          $ref: "#/components/responses/InternalServerError"


  /users/me/tags:
    put:
      summary: Обновить теги текущему пользователю
      description: Заменяет предыдущие теги на заданные текущему пользователю, используя access токен.
      tags:
        - Users
      security:
        - CookieAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tag_ids:
                  type: array
                  items:
                    type: integer
                  example: [1,2,3]
      responses:
        200:
          description: Успешное добавление тега
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/addUserTagResponse"
        401:
          $ref: "#/components/responses/TokenExpired"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  /forgot-pw:
    post:
      summary: Отправить запрос на смену пароля
      description: Отправляет код для подтверждения запроса на почту.
      tags:
        - Password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "ivan@example.com"
      responses:
        200:
          description: Код отправлен на почту
        401:
          $ref: "#/components/responses/TokenExpired"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /verify-code:
    post:
      summary: Получить токен для смены пароля
      description: Валидирует код с почты и устанавливает куку с токеном на смену пароля.
      tags:
        - Password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "ivan@example.com"
                code:
                  type: string
                  example: "123456"

      responses:
        200:
          description: Установлена кука с токеном
          headers:
            Set-Cookie:
              schema:
                type: string
                example: "reset_token=abc123; Path=/reset-pw; HttpOnly; Secure; SameSite=Lax; Max-Age=600"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/TokenExpired"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"
  /reset-pw:
    post:
      summary: Изменить пароль
      description: Изменяет пароль пользователя, используя reset_token куку.
      tags:
        - Password reset
      security:
        - CookieAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                new_password:
                  type: string
                  format: password
                  example: "secret123"
      responses:
        200:
          description: Пароль успешно изменён
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/TokenExpired"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"

  /events:
    get:
      summary: Получить список мероприятий
      description: Возвращает список мероприятий в пределах 100 км.
      tags:
        - Events
      parameters:
        - in: query
          name: keywords
          schema:
            type: string
          description: Ключевые слова
        - in: query
          name: tags
          schema:
            type: string
          example: "1,5,7"
          description: Теги мероприятия
        - in: query
          name: dateWithin
          description: Отрезок времени до начала мероприятия
          schema:
            type: string
            enum: [ day, week, month ]
          example: "week"
        - in: query
          name: latitude
          schema:
            type: number
            format: double
            example: 55.755825
          description: Широта координаты пользователя
        - in: query
          name: longitude
          schema:
            type: number
            format: double
            example: 37.617298
          description: Долгота координаты пользователя

      responses:
        200:
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EventResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/TokenExpired"
        500:
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: Создать новое мероприятие
      description: Создает новое мероприятие с указанными параметрами
      tags:
        - Events
      security:
        - CookieAuth: [ ]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/CreateEventRequest"
      responses:
        200:
          description: мероприятие успешно создано
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateEventResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/TokenExpired"
        500:
          $ref: "#/components/responses/InternalServerError"

  /events/{id}:
    get:
      summary: Получить детальную информацию о мероприятии
      description: Возвращает полную информацию о мероприятии по его ID
      tags:
        - Events
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID мероприятия
        - in: query
          name: invite
          schema:
            type: string
          description: Токен приглашения на приватное мероприятие
      responses:
        200:
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventByIDResponse"

        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/TokenExpired"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

    put:
      summary: Обновить мероприятие
      description: Обновляет информацию о мероприятии
      tags:
        - Events
      security:
        - CookieAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID мероприятия
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UpdateEventRequest"

      responses:
        200:
          description: мероприятие обновлено
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/TokenExpired"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"


    delete:
      summary: Удалить мероприятие
      description: Удаляет мероприятие
      tags:
        - Events
      security:
        - CookieAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID мероприятия
      responses:
        204:
          description: мероприятие успешно удалено
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/TokenExpired"
        500:
          $ref: "#/components/responses/InternalServerError"

  /events/{id}/subscription:
    post:
      summary: Участвовать в мероприятии
      description: Регистрирует текущего пользователя на участие в мероприятии, используя access токен.
      tags:
        - Events
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: ID мероприятия
        - in: query
          name: invite
          schema:
            type: string
          description: Токен приглашения на приватное мероприятие
      responses:
        200:
          description: Пользователь зарегистрирован на мероприятие
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/TokenExpired"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Отменить участие в мероприятии
      description: Отменяет участие текущего пользователя в мероприятии, используя access токен.
      tags:
        - Events
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: ID мероприятия
      responses:
        200:
          description: Участие пользователя отменено
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/TokenExpired"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  /events/generate-desc:
    post:
      summary: Улучшить описание с помощью ИИ
      description: Генерирует улучшенное описание на основе предоставленного.
      tags:
        - Events
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Ночная вечеринка"
      responses:
        200:
          description: Пользователь зарегистрирован на мероприятие
          content:
            application/json:
              schema:
                type: object
                properties:
                  description:
                    type: string
                    example: "Невероятная ночная вечеринка"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/TokenExpired"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
        502:
          $ref: "#/components/responses/BadGateway"
  /admin/events:
    get:
      summary: Получить список мероприятий с фильтрами администратора
      description: Возвращает список мероприятий с пагинацией и фильтрами администратора.
      tags:
        - Events
      parameters:
        - in: query
          name: keywords
          schema:
            type: string
          description: Ключевые слова
        - in: query
          name: tags
          schema:
            type: array
            items:
              type: integer
          style: form
          explode: false
          description: Теги мероприятия
        - in: query
          name: ownerID
          schema:
            type: integer
          description: ID владельца мероприятия
        - in: query
          name: userID
          schema:
            type: integer
          description: ID участника мероприятия
      responses:
        200:
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/EventResponse"
                  meta:
                    $ref: "#/components/schemas/PaginationMeta"
                example:
                  data:
                    - id: 1
                      name: "Концерт"
                      description: "Грандиозный концерт"
                      capacity: 50
                      latitude: 55.755825
                      longitude: 37.617298
                      address: "Москва, Красная площадь"
                      date: "2025-06-20T14:48:00Z"
                      owner_id: 1
                      is_private: false
                      is_premium: true
                      tags:
                        - id: 5
                          name: "музыка"
                      created_at: "2025-05-20T14:48:00Z"

                  meta:
                    total: 150
                    page: 1
                    limit: 20
                    total_pages: 8
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/TokenExpired"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  /admin/events/{id}:
    delete:
      summary: Удалить мероприятие, требуются права администратора
      description: Удаляет мероприятие по его ID
      tags:
        - Events
      parameters:
        - in: path
          name: id
          required: true
          description: ID удаляемого мероприятия
      responses:
        200:
          description: Успешно удаляет мероприятие
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/TokenExpired"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /events/home:
    get:
      summary: Получить списки мероприятий для главной страницы
      description: |
        Возвращает 4 блока мероприятий для главной страницы:
        - Премиум мероприятия (3 штуки)
        - Рекомендованные мероприятия (6 штук, учитывая теги и расстояние)
        - Новые мероприятия (6 штук, отсортированные по дате создания)
        - Популярные мероприятия (6 штук, отсортированные по количеству участников)
      tags:
        - Events
      parameters:
        - in: query
          name: latitude
          schema:
            type: number
            format: double
            example: 55.755825
          description: Широта координаты пользователя
          required: false
        - in: query
          name: longitude
          schema:
            type: number
            format: double
            example: 37.617298
          description: Долгота координаты пользователя
          required: false

      responses:
        200:
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                properties:
                  premium:
                    type: array
                    items:
                      $ref: "#/components/schemas/EventResponse"
                    maxItems: 6
                  recommended:
                    type: array
                    items:
                      $ref: "#/components/schemas/EventResponse"
                    maxItems: 6
                  latest:
                    type: array
                    items:
                      $ref: "#/components/schemas/EventResponse"
                    maxItems: 6
                  popular:
                    type: array
                    items:
                      $ref: "#/components/schemas/EventResponse"
                    maxItems: 6
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"

  /events/{id}/invite:
    get:
      summary: Создать ссылку-приглашение на мероприятие
      description: Создать ссылку-приглашение
      tags:
        - Events
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: ID мероприятия
      responses:
        200:
          description: Ссылка-приглашение
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/TokenExpired"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  /users/me/upcoming-events:
    get:
      summary: Получить список предстоящих мероприятий для текущего пользователя
      description: Получает список предстоящих мероприятий для текущего пользователья, используя access токен.
      tags:
        - Users
      security:
        - CookieAuth: [ ]
      responses:
        200:
          description: Успешно возвращает список мероприятий
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EventResponse"
        401:
          $ref: "#/components/responses/TokenExpired"
        500:
          $ref: "#/components/responses/InternalServerError"

  /users/me/past-events:
    get:
      summary: Получить список прошедших мероприятий для текущего пользователя
      description: Получает список прошедших мероприятий для текущего пользователья, используя access токен.
      tags:
        - Users
      security:
        - CookieAuth: [ ]
      responses:
        200:
          description: Успешно возвращает список мероприятий
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EventResponse"
        401:
          $ref: "#/components/responses/TokenExpired"
        500:
          $ref: "#/components/responses/InternalServerError"

  /premium-payment:
    post:
      summary: Отправить запрос на создание счета на отплату покупки премиума
      description: Содаёт счёт, привязанный к текущему пользователю.
      tags:
        - Premium
      security:
        - CookieAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                event_id:
                  type: integer
                  example: 1
      responses:
        200:
          description: Успешно возвращает ID счета
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1

  /premium-payment/{id}:
    get:
      summary: Валидировать пользователя и получить счет
      description: Валидирует привязку пользователя к нужному счету и возвращает счет, используя access токен.
      tags:
        - Premium
      security:
        - CookieAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Успешно возвращает счет
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  event_id:
                    type: integer
                    example: 1
                  shop:
                    type: string
                    example: "Treffly"
                  price:
                    type: integer
                    example: 100
                  status:
                    type: string
                    example: pending
                  created_at:
                    type: string
                    format: date

  /premium-payment/{id}/complete:
    post:
      summary: Изменить статус покупки премиума на завершённый
      description: Изменяет статус покупки премиума текущего пользователя на завершённый.
      tags:
        - Premium
      security:
        - CookieAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Успешно изменяет статус
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  /users/generate-limit:
    get:
      summary: Получить ограничение пользователя на запросы к генерации описания
      description: Получает ограничение пользователя на запросы к генерации описания
      tags:
        - Users
      security:
        - CookieAuth: [ ]
      responses:
        200:
          description: Возвращает кол-во попыток
          content:
            application/json:
              schema:
                type: object
                properties:
                  limit:
                    type: integer
                    example: 3
                  remaining:
                    type: integer
                    example: 2
                  reset_at:
                    type: string
                    format: date
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

  /geocode:
    get:
      summary: Получить адрес по координатам
      description: Возвращает адрес по координатам.
      tags:
        - Geo
      parameters:
        - in: query
          name: latitude
          schema:
            type: number
            format: double
            example: 55.755825
          description: Широта координаты
          required: true
        - in: query
          name: longitude
          schema:
            type: number
            format: double
            example: 37.617298
          description: Долгота координаты
          required: true
      responses:
        200:
          description: Полученная локация
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeocodeResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"

  /reverse-geocode:
    get:
      summary: Получить координаты по адресу
      description: Возвращает координаты по адресу.
      tags:
        - Geo
      parameters:
        - in: query
          name: address
          schema:
            type: string
            example: "Воронеж"
          description: Адрес
          required: true
      responses:
        200:
          description: Полученная локация
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeocodeResponse"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"

  /suggest/addresses:
    get:
      summary: Получить предложения мест по тексту
      description: Возвращает предложения мест по тексту вместе со случайно сгенерированным uuid для каждого элемента.
      tags:
        - Geo
      parameters:
        - in: query
          name: text
          schema:
            type: string
            example: "галерея чижова"
          required: true
      responses:
        200:
          description: предложения на основе введенного текста
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SuggestItem"
                example:
                  - id: "c623f50a-428c-4c54-b822-9e37f17ee5df"
                    title: "Галерея Чижова"
                    address: "Воронеж, Кольцовская улица, 35"
                  - id: "e6b4b619-d731-45f8-a091-df78ef23f97f"
                    title: "Галерея Чижова"
                    address: "Воронеж, Кольцовская улица, 35А"
                  - id: "20060e98-5779-4394-900d-e5f60d1e65a7"
                    title: "Резиденции Галереи Чижова"
                    address: "Воронеж, улица Куколкина, 18"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/InternalServerError"

  /images:
    get:
      summary: Получить изображение
      description: Возвращает изображение по указанному пути.
      tags:
        - Image
      parameters:
        - in: query
          name: path
          schema:
            type: string
            example: "event/123.jpg"
          required: true
      responses:
        200:
          description: изображение
          content:
            image/png:
              schema:
                type: string
                format: binary
            image/jpeg:
              schema:
                type: string
                format: binary
            image/jpg:
              schema:
                type: string
                format: binary
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
          example: "ivan_ivanov"
        email:
          type: string
          format: email
          example: "ivan@example.com"
        created_at:
          type: string
          format: date-time
          example: "2025-01-05T14:48:00Z"
        is_admin:
          type: boolean
          example: false

    UserWithTags:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            tags:
              type: array
              items:
                $ref: "#/components/schemas/Tag"
          required:
            - tags

    Tag:
      type: object
      properties:
        id:
          type: integer
          example: 5
        name:
          type: string
          example: "музыка"
      required:
        - id
        - name

    addUserTagResponse:
      $ref: "#/components/schemas/Tag"

    CreateUserRequest:
      type: object
      properties:
        username:
          type: string
          example: "ivan_ivanov"
        email:
          type: string
          format: email
          example: "ivan@example.com"
        password:
          type: string
          format: password
          example: secret123
      required:
        - username
        - email
        - password

    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
          example: "new_username"
        image:
          type: string
          format: binary

    LoginUserRequest:
        type: object
        properties:
          email:
            type: string
            format: email
            example: "user@example.com"
          password:
            type: string
            format: password
            example: "secret123"
        required:
          - email
          - password

    UpdateUserResponse:
      $ref: "#/components/schemas/UpdateUserRequest"

    EventResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Концерт"
        description:
          type: string
          example: "Грандиозный концерт"
        capacity:
          type: integer
          example: 50
        latitude:
          type: number
          format: double
          example: 55.755825
        longitude:
          type: number
          format: double
          example: 37.617298
        address:
          type: string
          example: "Москва, Красная площадь"
        date:
          type: string
          format: date-time
        owner_id:
          type: integer
          example: 1
        is_private:
          type: boolean
          example: false
        is_premium:
          type: boolean
          example: true
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        created_at:
          type: string
          format: date-time
          example: "2025-05-20T14:48:00Z"
        participant_count:
          type: integer
          example: 10
        image_event_url:
          type: string
          format: uri
          example: "https://treffly.ru/api/images/event/123.jpg"
        image_user_url:
          type: string
          format: uri
          example: "https://treffly.ru/api/images/user/123.jpg"
      example:
          id: 1
          name: "Концерт"
          description: "Грандиозный концерт"
          capacity: 50
          latitude: 55.755825
          longitude: 37.617298
          address: "Москва, Красная площадь"
          date: "2025-06-20T14:48:00Z"
          owner_username: "Dante"
          is_private: false
          is_premium: true
          tags:
            - id: 5
              name: "музыка"
          created_at: "2025-05-20T14:48:00Z"
          participant_count: 10
          image_event_url: "https://treffly.ru/api/images/event/123.jpg"
          image_user_url: "https://treffly.ru/api/images/user/123.jpg"

    CreateEventRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 5
          maxLength: 100
          example: "Вечеринка в стиле 90-х"
        description:
          type: string
          minLength: 50
          maxLength: 1000
          example: "Ночная вечеринка с хитами 90-х"
        capacity:
          type: integer
          minimum: 1
          maximum: 500
          example: 100
        latitude:
          type: number
          format: double
          minimum: -90
          maximum: 90
          example: 55.752023
        longitude:
          type: number
          format: double
          minimum: -180
          maximum: 180
          example: 37.617499
        address:
          type: string
          example: "Москва, ул. Тверская, 15"
        date:
          type: string
          format: date-time
          example: "2025-07-15T20:00:00Z"
        is_private:
          type: boolean
        tags:
          type: array
          items:
            type: integer
            minimum: 1
            maximum: 3
          example: [ 5, 7 ]
        image:
          type: string
          format: binary
      required:
        - name
        - description
        - capacity
        - latitude
        - longitude
        - address
        - date
        - tags

    CreateEventResponse:
        type: object
        properties:
          id:
            type: integer
            example: 1
          name:
            type: string
            example: "Концерт"
          description:
            type: string
            example: "Грандиозный концерт"
          capacity:
            type: integer
            example: 50
          latitude:
            type: number
            format: double
            example: 55.755825
          longitude:
            type: number
            format: double
            example: 37.617298
          address:
            type: string
            example: "Москва, Красная площадь"
          date:
            type: string
            format: date-time
          owner_id:
            type: integer
            example: 1
          is_private:
            type: boolean
            example: false
          is_premium:
            type: boolean
            example: true
          tags:
            type: array
            items:
              $ref: "#/components/schemas/Tag"
          created_at:
            type: string
            format: date-time
            example: "2025-05-20T14:48:00Z"
          image_event_url:
            type: string
            format: uri
            example: "https://treffly.ru/api/images/event/123.jpg"
          image_user_url:
            type: string
            format: uri
            example: "https://treffly.ru/api/images/user/123.jpg"
        example:
            id: 1
            name: "Концерт"
            description: "Грандиозный концерт"
            capacity: 50
            latitude: 55.755825
            longitude: 37.617298
            address: "Москва, Красная площадь"
            date: "2025-06-20T14:48:00Z"
            owner_username: "Dante"
            is_private: false
            is_premium: true
            tags:
              - id: 5
                name: "музыка"
            created_at: "2025-05-20T14:48:00Z"
            image_event_url: "https://treffly.ru/api/images/event/123.jpg"
            image_user_url: "https://treffly.ru/api/images/user/123.jpg"

    EventByIDResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Концерт"
        description:
          type: string
          example: "Грандиозный концерт"
        capacity:
          type: integer
          example: 50
        latitude:
          type: number
          format: double
          example: 55.755825
        longitude:
          type: number
          format: double
          example: 37.617298
        address:
          type: string
          example: "Москва, Красная площадь"
        date:
          type: string
          format: date-time
        owner_id:
          type: integer
          example: 1
        is_private:
          type: boolean
          example: false
        is_premium:
          type: boolean
          example: true
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        created_at:
          type: string
          format: date-time
          example: "2025-05-20T14:48:00Z"
        participant_count:
          type: integer
          example: 10
        is_owner:
          type: boolean
          example: false
        image_event_url:
          type: string
          format: uri
          example: "https://treffly.ru/api/images/event/123.jpg"
        image_user_url:
          type: string
          format: uri
          example: "https://treffly.ru/api/images/user/123.jpg"
      example:
        id: 1
        name: "Концерт"
        description: "Грандиозный концерт"
        capacity: 50
        latitude: 55.755825
        longitude: 37.617298
        address: "Москва, Красная площадь"
        date: "2025-06-20T14:48:00Z"
        owner_username: "Dante"
        is_private: false
        is_premium: true
        tags:
          - id: 5
            name: "музыка"
        created_at: "2025-05-20T14:48:00Z"
        participant_count: 10
        is_owner: false
        image_event_url: "https://treffly.ru/api/images/event/123.jpg"
        image_user_url: "https://treffly.ru/api/images/user/123.jpg"

    UpdateEventRequest:
      type: object
      properties:
        name:
          type: string
          example: "Концерт"
        description:
          type: string
          example: "Грандиозный концерт"
        capacity:
          type: integer
          example: 50
        latitude:
          type: number
          format: double
          example: 55.755825
        longitude:
          type: number
          format: double
          example: 37.617298
        address:
          type: string
          example: "Москва, Красная площадь"
        date:
          type: string
          format: date-time
        is_private:
          type: boolean
          example: false
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        image:
          type: string
          format: binary
        delete_image:
          type: boolean
          example: false
      example:
        id: 1
        name: "Концерт"
        description: "Грандиозный концерт"
        capacity: 50
        latitude: 55.755825
        longitude: 37.617298
        address: "Москва, Красная площадь"
        date: "2025-06-20T14:48:00Z"
        is_private: false
        is_premium: true
        tags:
          - id: 5
            name: "музыка"
      required:
        - name
        - description
        - capacity
        - latitude
        - longitude
        - address
        - date
        - tags

    GeocodeResponse:
      type: object
      properties:
        address:
          type: string
          example: "Воронежская область, Новоусманский район, Бабяковское сельское поселение"
        Lat:
          type: number
          format: double
          example: 51.707535
        Lon:
          type: number
          format: double
          example: 39.438817

    SuggestItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "c623f50a-428c-4c54-b822-9e37f17ee5df"
        title:
          type: string
          example: "Галерея Чижова"
        address:
          type: string
          example: "Воронеж, Кольцовская улица, 35"

    PaginationMeta:
      type: object
      properties:
        total:
          type: integer
          example: 150
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total_pages:
          type: integer
          example: 8


    Error:
      type: object
      properties:
        Title:
          type: string
        Subtitle:
          type: string
      required:
        - Title
        - Subtitle

  examples:
    GeneralBadRequest:
      value:
        Title: "Ошибка запроса"
        Subtitle: "Перезагрузи страницу"

    NotFound:
      value:
        Title: "Ничего не найдено"
        Subtitle: "Запрашиваемый ресурс недоступен или не существует"

    InvalidCredentials:
      value:
        Title: "Неверный логин или пароль"
        Subtitle: "Попробуй ещё раз"

    TokenExpired:
      value:
        Title: "Сессия завершена"
        Subtitle: "Войди снова, чтобы продолжить"

    EmailTaken:
      value:
        Title: "Почта уже занята"
        Subtitle: "Укажи другую почту или войди в аккаунт"

    BadRequest:
      value:
        Title: "Некорректные данные"
        Subtitle: "Проверь введённую информацию и попробуй снова"

    Forbidden:
      value:
        Title: "Недостаточно прав"
        Subtitle: "У тебя нет доступа к этому разделу"

    InternalServer:
      value:
        Title: "Ошибка сервера"
        Subtitle: "Что-то пошло не так. Попробуй позже"

    BadGateway:
      value:
        Title: "Сервер не отвечает"
        Subtitle: "Запрос занял слишком много времени. Попробуй позже"

    RefreshTokenCookie:
      summary: Пример refresh token cookie
      value: "refresh_token=abc123; Path=/api/auth; HttpOnly; Secure; SameSite=Lax; Max-Age=604800"

    AccessTokenCookie:
      summary: Пример access token cookie
      value: "access_token=xyz789; Path=/api/; HttpOnly; Secure; SameSite=Lax; Max-Age=3600"

  responses:
    GeneralBadRequest:
      description: Общая ошибка запроса
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            oneOf:
              $ref: '#/components/examples/GeneralBadRequest'

    EmailTaken:
      description: Почта уже занята
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            oneOf:
              $ref: '#/components/examples/EmailTaken'

    InvalidCredentials:
      description: Неверные учетные данные
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            oneOf:
              $ref: '#/components/examples/InvalidCredentials'


    TokenExpired:
      description: Токен устарел
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            oneOf:
              $ref: '#/components/examples/TokenExpired'

    BadRequest:
      description: Некорректные данные
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            oneOf:
             $ref: '#/components/examples/BadRequest'

    Forbidden:
      description: Доступ запрещен
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            oneOf:
              $ref: '#/components/examples/Forbidden'

    NotFound:
      description: Ресурс не найден
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            oneOf:
              $ref: '#/components/examples/NotFound'

    InternalServerError:
      description: Внутренняя ошибка сервера
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            oneOf:
              $ref: '#/components/examples/InternalServer'

    BadGateway:
      description: Сервер не отвечает
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            $ref: '#/components/examples/BadGateway'

  securitySchemes:
    CookieAuth:
      type: apiKey
      in: cookie
      name: refresh_token
    
      
